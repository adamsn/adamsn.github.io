name: Generate PDF Resume

on:
  push:
    branches: [ main ]
    paths:
      - 'index.html'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm init -y
        npm install puppeteer

    - name: Generate PDF
      run: |
        cat > generate-pdf.js << 'EOL'
        const puppeteer = require('puppeteer');
        const path = require('path');
        const fs = require('fs');

        (async () => {
          console.log('Starting PDF generation process...');

          const browser = await puppeteer.launch({
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          console.log('Browser launched successfully');

          const page = await browser.newPage();
          console.log('New page created');

          const htmlPath = path.join(process.cwd(), 'index.html');
          console.log(`Loading HTML from: ${htmlPath}`);

          await page.goto(`file://${htmlPath}`, {
            waitUntil: 'networkidle2'
          });
          console.log('Page loaded, waiting for resources...');

          // Use standard setTimeout instead of page.waitForTimeout
          await new Promise(resolve => setTimeout(resolve, 5000));
          console.log('Waited 5 seconds for resources to load');

          // Ensure the output directory exists
          const outputDir = path.join(process.cwd(), 'docs');
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
            console.log('Created output directory');
          }

          const pdfPath = path.join(outputDir, 'pdf.pdf');
          console.log(`Generating PDF at: ${pdfPath}`);

          await page.pdf({
            path: pdfPath,
            format: 'A4',
            printBackground: true,
            scale: 0.97,
            pageRanges: '1',
            margin: {
              top: '0px',
              right: '0px',
              bottom: '0px',
              left: '0px'
            }
          });

          // Check if PDF was created successfully
          if (fs.existsSync(pdfPath)) {
            const stats = fs.statSync(pdfPath);
            console.log(`PDF created successfully! Size: ${stats.size} bytes`);
          } else {
            console.error('PDF file was not created!');
            process.exit(1);
          }

          await browser.close();
          console.log('Browser closed');
        })();
        EOL

        mkdir -p docs
        node generate-pdf.js

    - name: Commit and push PDF
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'github-actions@github.com'

        # Check if PDF exists and has content
        if [ -f docs/pdf.pdf ]; then
          file_size=$(stat -c%s "docs/pdf.pdf")
          echo "PDF size: $file_size bytes"
          if [ "$file_size" -eq 0 ]; then
            echo "Error: PDF file is empty!"
            exit 1
          fi
        else
          echo "Error: PDF file not found!"
          exit 1
        fi

        # Force add the PDF file
        git add -f docs/pdf.pdf

        # Force a commit even if git thinks there are no changes
        git commit -m "Update generated PDF resume [$(date)]" || echo "No changes to commit"

        # Push changes to the repository
        git push